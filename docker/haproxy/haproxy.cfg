# Setting `log` here with the address of 127.0.0.1 will have the effect
# of haproxy sending the udp log messages to its own rsyslog instance
# (which sits at `127.0.0.1`) at the `local0` facility including all
# logs that have a priority greater or equal to the specified log level
# log 127.0.0.1 local0 warning
# log /dev/log local2 info
global
  lua-load /etc/haproxy/scripts/log_dest_server.lua
  lua-load /etc/haproxy/scripts/hello_world.lua
  lua-load /etc/haproxy/scripts/mirror.lua
  daemon
  maxconn 4096
  log /dev/log local2 info

defaults
  mode http
  log global
  option httplog
  option log-health-checks
  option dontlognull
  option http-ignore-probes
  option forwardfor
  option redispatch
  option http-buffer-request
  timeout client 150000
  timeout server 3600000
  timeout connect 500
  stats enable
  stats uri /stats

frontend http-in
  bind  *:80

  acl debugme req.hdr_cnt(X-debug-me) ge 1
  # add your http manipulation rules here
  #http-request lua mirror if debugme
  http-request set-header X-App-User %[req.cook(username)]

  #http-request use-service lua.log_req
  option http-buffer-request
  capture request header Host len 32
  declare capture request len 40000
  http-request capture req.body id 0
  capture request header cookie len 400
  capture request header X-App-Service len 200
  capture request header X-App-User len 200
  capture response header Content-Length len 10
  log-format "%ci \"%[capture.req.method] %[capture.req.uri] %[capture.req.hdr(1)] %[capture.req.hdr(2)] %[capture.req.hdr(3)] %ST %B %Tr\" %[capture.res.hdr(0)] %[capture.res.hdr(1)] %[capture.req.hdr(0)]"
  default_backend couch-db

backend couch-db
  #http-request use-service lua.log_res
  balance roundrobin
  server couchdb1 couchdb:5984
